if "subw_outputs_dict" in locals() and "ids" in locals():
    subw_outputs_dict['GATK-genotype'] = expand(paths['vqsr_recal'],
                                         chromosome=range(1,23))

rule haplotype_caller:
    input:
        bam=paths['recal_bam'],
        interval=paths['haplotype_intervals']

    output:
        paths['haplotype_raw'],
        paths['haplotype_idx']

    singularity:
        paths['container']

    group: 'haplotype'

    shell:
        'gatk --java-options "-Xmx{config[gatk][HaplotypeCaller][memory]}" '
            'HaplotypeCaller  '
            '--verbosity {config[gatk][verbosity]} '
            '-R {paths[ref_genome]} '
            '-I {input.bam} '
            '-L {input.interval} '
            '-O {output} '
            '{config[gatk][HaplotypeCaller][options]}'

rule name_map:
    input:
        lambda wildcards: expand(paths['haplotype_raw']\
                                 .replace('{chromosome}', \
                                          wildcards.chromosome),
                                 id=ids),
        lambda wildcards: expand(paths['haplotype_idx']\
                                 .replace('{chromosome}', \
                                          wildcards.chromosome),
                                 id=ids)

    output:
        temp(paths['name_map'])

    group: 'haplotype'

    run:
        import glob
        import os
        with open(output[0], 'w') as outfile:
            # get variants in output
            variant_dir = os.path.split(paths['haplotype_raw'])[0]
            variant_dir = variant_dir.replace('{chromosome}', wildcards.chromosome)
            # get variants in 1000 genomes
            supp_dir = paths['1000G_dir'].replace('{chromosome}', wildcards.chromosome)

            split_chars = ['.', '_']
            for i, d in enumerate([variant_dir, supp_dir]):
                for f in glob.glob(d + "/*.g.vcf"):
                    sample = os.path.split(f)[1]
                    sample = sample[:sample.find(split_chars[i])]  # remove after first .
                    outfile.write(
                        "{}\t{}\n".format(
                            sample,
                            f))

rule db_import:
    input:
        paths['name_map']

    output:
        temp(directory(paths['genomics_db']))

    singularity:
        paths['container']

    shell:
        'gatk --java-options "-Xmx{config[gatk][GenomicsDBImport][memory]}" '
            'GenomicsDBImport  '
            '--verbosity {config[gatk][verbosity]} '
            '-L {wildcards.chromosome} '
            '--sample-name-map {input} '
            '--genomicsdb-workspace-path {output} '
            '{config[gatk][GenomicsDBImport][options]} '

rule genotype_gvcf:
    input:
        db=paths['genomics_db'],
        intervals=paths['haplotype_intervals']

    output:
        vcf=paths['genotype_gvcf'],
        tbi=paths['genotype_tbi']

    singularity:
        paths['container']

    shell:
        'gatk --java-options "-Xmx{config[gatk][GenotypeGVCFs][memory]}" '
            'GenotypeGVCFs '
            '--verbosity {config[gatk][verbosity]} '
            '-R {paths[ref_genome]} '
            '-L {input.intervals} '
            '--variant gendb://{input.db} '
            '-O {output.vcf} '
            '{config[gatk][GenotypeGVCFs][options]} '
            '2 > /dev/null'

def get_variant_options(wildcards):
    return config['gatk']['VariantRecalibrator']['options'].format(
            hapmap=paths['ref_hapmap'],
            omni=paths['ref_omni'],
            OKG=paths['ref_1000g'],
            dbsnp=paths['ref_dbsnp'])

rule variant_recal:
    input:
        ref=paths['ref_genome'],
        vcf=paths['genotype_gvcf']

    output:
        recal=paths['vqsr_recal'],
        tranche=paths['vqsr_vcf'],

    params:
        get_variant_options

    singularity:
        paths['container']

    shell:
        'gatk --java-options "-Xmx{config[gatk][VariantRecalibrator][memory]}" '
            'VariantRecalibrator '
            '--verbosity {config[gatk][verbosity]} '
            '-R {input.ref} '
            '-V {input.vcf} '
            '--recal-file {output.recal} '
            '--tranches-file {output.tranche} '
            '{params}'

rule apply_recal:
    input:
        ref=paths['ref_genome'],
        vcf=paths['genotype_gvcf'],
        recal=paths['vqsr_recal'],
        tranche=paths['vqsr_vcf'],

    output:
        paths['vqsr_vcf']

    singularity:
        paths['container']

    shell:
        'gatk --java-options "-Xmx{config[gatk][ApplyRecalibration][memory]}" '
            'ApplyRecalibration '
            '--verbosity {config[gatk][verbosity]} '
            '-R {input.ref} '
            '--tranches-file {input.tranche} '
            '--recal-file {input.recal} '
            '-O {output.vcf} '
            '{config[gatk][ApplyVQSR][options]}'
