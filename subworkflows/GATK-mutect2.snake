with open(paths['mutect_pairs'], 'r') as reader:
    reader.readline()  # header
    tumor_normal = {}
    for line in reader:
        tokens = line.split()
        tumor_normal[tokens[0]] = tokens[1]

if "subw_outputs_dict" in locals() and "ids" in locals():
    output_ids = [id for id in ids if id in tumor_normal]
    #output_ids = output_ids[0:2]
    subw_outputs_dict['GATK-mutect2'] = expand(paths['filter_vcf'],
                                               id=output_ids)
    subw_outputs_dict['GATK-mutect2'].append(paths['filter_vcf_temp'])

localrules:
    pon_mutect_args

rule sites_only:
    input: 
        bam=ancient(paths['recal_bam']),
        ref=ancient(paths['ref_genome'])

    output:
        paths['sites_only']

    singularity:
        paths['gatk-container']

    shell:
        'SAMPLE=$(samtools view -H {input.bam} | '
            'grep "^@RG" | '
            'sed "s/.*SM:\([^\\t]*\).*/\\1/g" | '
            'sort | uniq ) \n'
        'if [[ $(echo $SAMPLE | wc -w) != 1 ]]; then \n'
            'echo {input.bam} contains more than 1 sample \n'
            'exit 1 \n'
        'fi \n'
        'gatk --java-options "-Xmx{config[gatk][Mutect2_Sites_Only][memory]}" '
            'Mutect2 '
            '--reference {input.ref} '
            '--input {input.bam} '
            '--tumor $SAMPLE '
            '--output {output} '
            '--verbosity {config[gatk][verbosity]} '
        
def get_pon_samples(wildcards):
    pon_ids = [detail.sample 
               for detail in sample_details.values()
               if (detail.individual != wildcards.individual and
                    detail.center == wildcards.center)
               ]
    # remove duplicates from nwgc
    if wildcards.center == 'nwgc':
        pon_ids = [pon_id for pon_id in pon_ids if pon_id[-1] != 'd']
    return expand(paths['sites_only'],
                  id=pon_ids)

rule pon_mutect_args:
    input:
        get_pon_samples

    output:
        temp(paths['pon_list'])

    group: 'create_pon'

    run:
        with open(output[0], 'w') as outfile:
            for f in input:
                outfile.write(f + "\n")

rule generate_pon:
    input:
        pon=paths['pon_list']
        
    output:
        paths['pon']

    singularity:
        paths['gatk-container']

    group: 'create_pon'

    shell:
        'gatk --java-options "-Xmx{config[gatk][CreateSomaticPanelOfNormals][memory]}" '
            'CreateSomaticPanelOfNormals '
            '-O {output} '
            '-vcfs {input} '
            '--verbosity {config[gatk][verbosity]} '

rule collect_counts:
    input:
        paths['recal_bam']

    output:
        table=paths['mutect_alt'],
        ref_hist=paths['mutect_ref_hist'],
        alt_hist=paths['mutect_alt_hist']

    singularity:
        paths['gatk-container']

    group: 'call_variants'

    shell:
        'gatk --java-options "-Xmx{config[gatk][CollectF1R2Counts][memory]}" '
            'CollectF1R2Counts '
            '--reference {paths[ref_genome]} '
            '--intervals {paths[exome_intervals]} '
            '--input {input} '
            '-alt-table {output.table} '
            '-ref-hist {output.ref_hist} '
            '-alt-hist {output.alt_hist} '
            '--verbosity {config[gatk][verbosity]} '
 
rule learn_model:
    input:
        table=paths['mutect_alt'],
        ref_hist=paths['mutect_ref_hist'],
        alt_hist=paths['mutect_alt_hist']

    output:
        paths['mutect_prior']

    singularity:
        paths['gatk-container']

    group: 'call_variants'

    shell:
        'gatk --java-options "-Xmx{config[gatk][LearnReadOrientationModel][memory]}" '
            'LearnReadOrientationModel '
            '-alt-table {input.table} '
            '-ref-hist {input.ref_hist} '
            '-alt-hist {input.alt_hist} '
            '-O {output} '
            '--verbosity {config[gatk][verbosity]} '
 
def get_call_input(wildcards):
    detail = sample_details[wildcards.id]
    param = get_call_params(wildcards)
    result = {'pon': expand(paths['pon'],
                            individual=detail.individual,
                            center=detail.center),
            'prior': expand(paths['mutect_prior'], id=wildcards.id),
            'test': expand(paths['recal_bam'], id=wildcards.id),
            'normal': expand(paths['recal_bam'], id=param['normal'])}

    return result

def get_call_params(wildcards):
    '''
    return test and normal sample names from ids
    strip ending d for nwgc samples
    '''
    test_details = sample_details[wildcards.id]
    #normal_details = next((detail for detail in sample_details.values()
    #                       if detail.individual == test_details.individual and
    #                          detail.center == test_details.center and
    #                          detail.sample != test_details.sample), None)
    #if normal_details is None:
    if wildcards.id not in tumor_normal:
        raise ValueError("No matching normal sample found for sample " + 
                         wildcards.id)

    normal_details = sample_details[tumor_normal[wildcards.id]]
    test = test_details.sample
    if test_details.center == 'nwgc':
        test = test.rstrip('d')
    normal = normal_details.sample
    if normal_details.center == 'nwgc':
        normal = normal.rstrip('d')

    result = {'test': test, 'normal': normal}

    return result

rule call_variants:
    input:
        unpack(get_call_input)

    output:
        vcf=paths['unfiltered_vcf'],
        bam=paths['mutect_bam']

    params:
        names=get_call_params

    singularity:
        paths['gatk-container']

    group: 'call_variants'

    shell:
        'gatk --java-options "-Xmx{config[gatk][Mutect2_Calls][memory]}" '
            'Mutect2 '
            '--reference {paths[ref_genome]} '
            '--input {input.test} '
            '--tumor {params.names[test]} '
            '--input {input.normal} '
            '--normal {params.names[normal]} '
            '--pon {input.pon} '
            '--output {output.vcf} '
            '-bamout {output.bam} '
            '--germline-resource {paths[germline_resource]} '
            '--intervals {paths[exome_intervals]} '
            '--orientation-bias-artifact-priors {input.prior} '
            '--verbosity {config[gatk][verbosity]} '
            '{config[gatk][Mutect2_Calls][options]} '

rule filter_variants:
    input:
        bam=paths['filter_input'],
        vcf=paths['unfiltered_vcf']

    output:
        pileup=paths['pileup'],
        con_tab=paths['con_tab'],
        vcf=paths['filter_vcf']

    singularity:
        paths['gatk-container']

    group: 'filter_variants'

    shell:
        'gatk --java-options "-Xmx{config[gatk][Mutect2_Filter][memory]}" '
            'GetPileupSummaries '
            '--input {input.bam} '
            '--output {output.pileup} '
            '--variant {paths[common_snps]} '
            '--intervals {paths[exome_intervals]} '
            '--verbosity {config[gatk][verbosity]} '
            '{config[gatk][Mutect2_Filter][options]} \n'
        'gatk --java-options "-Xmx{config[gatk][Mutect2_Filter][memory]}" '
            'CalculateContamination '
            '--input {output.pileup} '
            '--output {output.con_tab} '
            '--verbosity {config[gatk][verbosity]} \n'
        'gatk --java-options "-Xmx{config[gatk][Mutect2_Filter][memory]}" '
            'FilterMutectCalls '
            '--variant {input.vcf} '
            '--contamination-table {output.con_tab} '
            '--output {output.vcf} '
            '--stats /dev/null '
            '--verbosity {config[gatk][verbosity]} \n'

rule group_filter:
    input:
        expand(paths['filter_vcf'],
                id=output_ids)

    output:
        touch(temp(paths['filter_vcf_temp']))

    group: 'filter_variants'
