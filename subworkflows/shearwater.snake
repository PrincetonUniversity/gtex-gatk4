from scripts.split_bed import count_chunks

# read in region file to determine number of chunks
chunks = count_chunks(paths['shearwater_region'],
                      config['shearwater']['chunk_size'])

num_chunks = 10  # chunks

# group jobs into batch size for jobs
batch_size = config['shearwater']['batch_size']
# This is expanded for one prior to keep all priors in the same group
# Shearwater rule will make all priors regardless of this expansion
outfiles = expand(paths['shearwater_vcf'],
                  chunk=range(num_chunks),
                  prior=config['shearwater']['priors'][0])
outfiles = [outfiles[i:i+batch_size]
            for i in range(0, len(outfiles), batch_size)]

if "subw_outputs_dict" in locals() and "ids" in locals():
    subw_outputs_dict['shearwater'] = expand(paths['shearwater_combined_vcf'],
                                        prior=config['shearwater']['priors'])

localrules:
    group_shearwater 

rule shearwater_region:
    input:
        region=paths['shearwater_region']

    output:
        temp(paths['shearwater_chunk'])

    group: 'shearwater'

    shell:
        'python {paths[base]}/scripts/split_bed.py '
            '{input.region} '
            '{config[shearwater][chunk_size]} '
            '{wildcards.chunk} '
            '> {output} '

rule shearwater:
    input: 
        bams=expand(paths['shearwater_input'],
                    id=ids),
        region=paths['shearwater_chunk']

    output:
        vcf=temp([paths['shearwater_vcf'].replace('{prior}', p)
                    for p in config['shearwater']['priors']])

    singularity:
        paths['bioconductor-container']

    threads:
        config['shearwater']['threads']

    group: 'shearwater'

    shell:
        'Rscript {paths[base]}/scripts/shearwater.R '
            '$(dirname {input.bams[0]}) '  # dir with bams
            '{input.region} '
            '{threads} '
            '{output.vcf} '
            #'&> /dev/null '

for i, files in enumerate(outfiles):
    rule:
        input: files
        output: temp(touch(paths['shearwater_batch'].format(id=i)))
        group: 'shearwater'

def get_prior_inputs(wildcards):
    return {'vcfs': expand(paths['shearwater_vcf'].replace(
                            '{prior}', wildcards.prior),
                        chunk=range(num_chunks)),
            'batch': expand(paths['shearwater_batch'],id=range(len(outfiles)))}

rule group_shearwater:
    input:
        unpack(get_prior_inputs)

    output:
        protected(paths['shearwater_combined_vcf'])

    shell:
        # get header from first file, change fileformat in first two lines
        " sed -f {paths[base]}/scripts/vcf.join {input.vcfs}  "
        "| gzip -c > {output}"
